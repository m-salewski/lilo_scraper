#!/usr/bin/env bash

LILOHTMLDIR="../../../linkedin_local_scraper/saved_webpages_test/"
MASTERCSV="../../data/master_test_test2.csv"

alias lilos='python3 lilo_scraping.py -d "$LILOHTMLDIR" -o "$MASTERCSV" -v'

colprint(){
    : '
    Prints out a DB to the terminal, ignoring the header
    -s uses the delimiter to parse the columns
    -t creates a tabular format 
    -n prevents merging of delimiters (ie empty entries)
    '
    tail -n $1 $2 | column -s '%' -t -n
}

filprint(){
    : '
    Prints out a DB to the terminal, ignoring the header
    -s uses the delimiter to parse the columns
    -t creates a tabular format 
    -n prevents merging of delimiters (ie empty entries)
    '
    tail -n $1 $2 | awk -F'%' -v v1=$3 -v v2=$4 '$v1==v2' | column -s '%' -t -n
}

jshow(){

   TEMPOUT="./temp_output.csv"
    
    # Check if the master DB has been modified; 
    # change summary DB if so
    if [ "$TEMPOUT" -ot "$MASTERCSV" ]; then
        
        #echo "$MASTERCSV is newer than $TEMPOUT"
        #ls -lt "$TEMPOUT"
        #ls -lt "$MASTERCSV"
        
        echo "Updating output file ... "
        python3 pyread.py -m "$MASTERCSV" -r 1
        echo -e "\n"
    fi
    
    # Print out the header; 
    # since `column` does not sort(?)
    column -s '%' -t -n "$TEMPOUT" | head -n 1
    # (print a line under the header for aethetics!)
    CHARS=$(column -s '%' -t -n "$TEMPOUT" | head -n 1 | wc -m)
    printf "%0.s-" `seq 1 $CHARS`; printf "\n"
    
    # Get the non-header rows 
    LINES=$(wc -l temp_output.csv | awk '{print $1"-1"}' | bc)
    
    # NOTE: "$1" can be _anything_
    if [ -z "$1" ]
    then
        colprint $LINES "$TEMPOUT" | sort -k1 -r
    else
        colprint $LINES "$TEMPOUT" | sort -k1
    fi        

#    column -s '%' -t -n "$TEMPOUT"
    : '
    -s uses the delimiter to parse the columns
    -t creates a tabular format 
    -n prevents merging of delimiters (ie empty entries)
    '
}

jfilt(){
    
    # Assume the master file has not been modified
    TEMPOUT="./temp_output.csv"
    
    # Print out the header; 
    # since `column` does not sort(?)
    column -s '%' -t -n "$TEMPOUT" | head -n 1
    # (print a line under the header for aethetics!)
    CHARS=$(column -s '%' -t -n "$TEMPOUT" | head -n 1 | wc -m)
    printf "%0.s-" `seq 1 $CHARS`; printf "\n"
    
    # Get the non-header rows 
    LINES=$(wc -l temp_output.csv | awk '{print $1"-1"}' | bc)
    
    # NOTE: "$1" can be _anything_
    if [ -z "$1" ]
    then
        filprint $LINES "$TEMPOUT" "$1" "$2" | sort -k1 -r
    else
        filprint $LINES "$TEMPOUT" "$1" "$2" | sort -k1
    fi       

#    column -s '%' -t -n "$TEMPOUT"
    : '
    -s uses the delimiter to parse the columns
    -t creates a tabular format 
    -n prevents merging of delimiters (ie empty entries)
    '
}

jread(){
    : '
    The func reads in an ID number **OR** a filepath, 
    and prints the job description from the original html file
    
    It has to do some processing:
    - find the file path
    - parse file path 
    - scrape html
    - output
    
    Would be better to just look-up from DB
    '
    # Assume standard root location for htmls
    DIR="../../../linkedin_local_scraper/saved_webpages_test/"    
    
    # This `if` is also no needed, unless we're dealing with the path
    if [[ "$1" == *"html"* ]]; then

        # Just rename this to a new variable
        HTMLF="$1"
    else
        # Find the file path associated with Job-ID
        # TODO: need safety in case of nonexistent or multiple files
        HTMLF=`(find "$LILOHTMLDIR" -name "*$1*" -type f)` 
         
    fi    
    
    # Split the file path into subdirectory 
    # (since all not in standard location after root)
    SUBDIR=`(echo "$HTMLF" | awk -F"$LILOHTMLDIR" '{print $2}' | awk -F'/' '{print $1}')`

    # Isolate the Job-ID (this is legacy since $1 _is_ it)
    JID=`(echo "$HTMLF" | awk -F"LinkedIn_" '{print $2}' | awk -F'.html' '{print $1}')`       
        
    # Read the job desc. from the file
    python3 job_description.py -d "$LILOHTMLDIR$SUBDIR/" -jid $JID | less
    
    }


jmove(){

    # NOTE: "$2" can be _anything_
    if [ -z "$2" ]
    then
        DESTDIR="Applied"
    else
        DESTDIR="$2"
    fi

    BASEPATH="../../../linkedin_local_scraper/saved_webpages_test"

    #echo "$BASEPATH"/"$DESTDIR"
    mv "$BASEPATH"/Open/*"$1"*.html "$BASEPATH"/"$DESTDIR"/

}
jfind(){ 
	result=$(find ../../../linkedin_local_scraper/saved_webpages_test -name "*$1*.html" | \
	grep -e "Applied\|Open\|Ignored\|Closed")
	loc=$(echo $result | awk -F'/' '{print $(NF-1)}')
	
	jobid=$(echo $result | awk -F'LinkedIn_' '{print $NF}' | sed "s|.html||g")
	
	echo "$result $loc $jobid"
}

jgrep(){
	jshow | grep $1
}
